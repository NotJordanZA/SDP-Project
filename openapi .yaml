openapi: 3.0.3
info:
  title: Wits Infrastructure Management - OpenAPI 3.0
  description: "Wits Student Project 2D"
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Wits Infrastructure Management
  url: https://github.com/AJ-222/SDP-Project
servers:
  - url: https://github.com/AJ-222/SDP-Project
tags:
  - name: venues
    description: Operations about venues
  - name: bookings
    description: Operations about bookings
  - name: users
    description: Operations about users
  - name: reports
    description: Operations about reports
  - name: adminRequests
    description: Operations about admin requests
  - name: schedules
    description: Operations about schedules
paths:
  /venues/findByField:
    get:
      tags:
        - venues
      summary: Finds venues by fields
      description: Pass in all the fields you want to filter by
      operationId: findVenuesByFields
      parameters:
        - name: id
          in: query
          description: id values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: campus
          in: query
          description: campus values that need to be considered for filter
          required: false
          schema:
            type: string
            enum: 
            - East Campus
            - West Campus
        - name: buildingName
          in: query
          description: buildingName values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: venueName
          in: query
          description: venueName values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: availableTimes
          in: query
          description: availableTimes values that need to be considered for filter
          required: false
          schema:
            type: array
            items: 
              type: string
        - name: closureStatus
          in: query
          description: closureStatus values that need to be considered for filter
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'    
        '400':
          description: Invalid field value
        '404':
          description: Entry not found
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /venues/create:
    post:
      tags:
        - venues
      summary: Add a new venue to the database
      description: Add a new venue to the database
      operationId: createVenue
      requestBody:
        description: Create a new venue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'   
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /venues/edit:
    put:
      tags:
        - venues
      summary: Update an existing venue
      description: Update an existing venue by Id
      operationId: editVenue
      requestBody:
        description: Update an existent venue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'    
        '400':
          description: Invalid ID supplied
        '404':
          description: Venue not found
        '422':
          description: Validation exception
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /venues/{venueId}:
    delete:
      tags:
        - venues
      summary: Deletes a venue
      description: delete a venue
      operationId: deleteVenue
      parameters:
        # - name: api_key
        #   in: header
        #   description: ''
        #   required: false
        #   schema:
        #     type: string
        - name: venueId
          in: path
          description: Venue id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  # /venues/{petId}/uploadImage:
  #   post:
  #     tags:
  #       - venues
  #     summary: uploads an image
  #     description: ''
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #       - name: additionalMetadata
  #         in: query
  #         description: Additional Metadata
  #         required: false
  #         schema:
  #           type: string
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  /bookings/findByField:
    get:
      tags:
        - bookings
      summary: Returns bookings by fields
      description: Pass in all the fields you want to filter by
      operationId: getBookingsByFields
      parameters:
        - name: id
          in: query
          description: id values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: venueBooker
          in: query
          description: venueBooker that needs to be considered for filter
          required: false
          schema:
            type: string
            format: email
        - name: venueId
          in: query
          description: venueId values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: bookingDate
          in: query
          description: bookingDate values that need to be considered for filter
          required: false
          schema:
            type: string
            format: date
        - name: bookingStartTime
          in: query
          description: bookingStartTime values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: bookingEndTime
          in: query
          description: bookingEndTime values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: bookingDescription
          in: query
          description: bookingDescription values that need to be considered for filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'    
        '400':
          description: Invalid field value
        '404':
          description: Entry not found
  /bookings/create:
    post:
      tags:
        - bookings
      summary: Create a booking
      description: Create a booking for a venue
      operationId: createBooking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /bookings/edit:
    put:
      tags:
        - bookings
      summary: Edit a booking
      description: Edit a booking for a venue
      operationId: editBooking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid Id supplied
        '422':
          description: Validation exception
  /bookings/{bookingId}:
    delete:
      tags:
        - bookings
      summary: Delete booking by ID
      description: delete a booking
      operationId: deleteBooking
      parameters:
        - name: bookingId
          in: path
          description: ID of the booking that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /schedules/findByField:
    get:
      tags:
        - schedules
      summary: Returns schedules by fields
      description: Pass in all the fields you want to filter by
      operationId: getSchedulesByFields
      parameters:
        - name: id
          in: query
          description: id values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: venueBooker
          in: query
          description: venueBooker that needs to be considered for filter
          required: false
          schema:
            type: string
            format: email
        - name: venueId
          in: query
          description: venueId values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: bookingDay
          in: query
          description: bookingDate values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: bookingStartTime
          in: query
          description: bookingStartTime values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: bookingEndTime
          in: query
          description: bookingEndTime values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: bookingDescription
          in: query
          description: bookingDescription values that need to be considered for filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'    
        '400':
          description: Invalid field value
        '404':
          description: Entry not found
  /schedules/create:
    post:
      tags:
        - schedules
      summary: Create a schedule entry
      description: Create a schedule entry
      operationId: createSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /schedules/edit:
    put:
      tags:
        - schedules
      summary: Edit a schedule entry
      description: Edit a schedule entry
      operationId: editSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          description: Invalid Id supplied
        '422':
          description: Validation exception
  /schedule/{scheduleId}:
    delete:
      tags:
        - schedules
      summary: Delete schedule entries by ID
      description: delete a schedule entry
      operationId: deleteSchedule
      parameters:
        - name: scheduleId
          in: path
          description: ID of the schedule entry that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Will check if a user's email is in the database before calling this.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    get:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{email}:
    get:
      tags:
        - users
      summary: Get user by wits email
      description: ''
      operationId: getUserByWitsEmail
      parameters:
        - name: email
          in: path
          description: 'The user that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid email supplied
        '404':
          description: User/email not found
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user, e.g change name.
      operationId: editUser
      parameters:
        - name: email
          in: path
          description: Email of user that needs to be changed.
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - users
      summary: Delete user
      description: Remove a user from the database.
      operationId: deleteUser
      parameters:
        - name: email
          in: path
          description: The user email that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
  /reports/findByField:
    get:
      tags:
        - reports
      summary: Returns reports by fields
      description: Pass in all the fields you want to filter by
      operationId: getReportsByFields
      parameters:
        - name: id
          in: query
          description: id values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: venueId
          in: query
          description: venueId values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: reportType
          in: query
          description: reportType values that need to be considered for filter
          required: false
          schema:
            type: string
            enum: 
            - Maintenance Issue
            - Equipment Issue
            - Health Issue
            - Incorrect Venue Details
            - Other
        - name: reportText
          in: query
          description: reportText values that need to be considered for filter
          required: false
          schema:
            type: string
        - name: reportStatus
          in: query
          description: reportStatus values that need to be considered for filter
          required: false
          schema:
            type: string
            enum: 
            - Pending
            - In progress
            - Resolved
        - name: resolutionLog
          in: query
          description: resolutionLog values that need to be considered for filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'          
        '400':
          description: Invalid field value
        '404':
          description: Entry not found
  /reports/create:
    post:
      tags:
        - reports
      summary: Creates new report
      description: Creates new report entry
      operationId: createReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'   
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Report'          
          '400':
            description: Invalid input
          '422':
            description: Validation exception
  /reports/edit:
    put:
      tags:
        - reports
      summary: Edit report
      description: Edit report entry
      operationId: editReport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'   
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Report'          
          '400':
            description: Invalid Id supplied
          '422':
            description: Validation exception
  /reports/{reportId}:
    delete:
      tags:
        - reports
      summary: Delete report by ID
      description: delete a report
      operationId: deleteReport
      parameters:
        - name: reportId
          in: path
          description: ID of the report that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /adminRequests/findByField:
    get:
      tags:
        - adminRequests
      summary: Returns adminRequests by fields
      description: Pass in all the fields you want to filter by
      operationId: getAdminRequestsByFields
      parameters:
        - name: id
          in: query
          description: id values that need to be considered for filter
          required: false
          schema:
            type: integer
        - name: requesterEmail
          in: query
          description: email values that need to be considered for filter
          required: false
          schema:
            type: string
            format: email
        - name: requestText
          in: query
          description: requestText values that need to be considered for filter
          required: false
          schema:
            type: string
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/AdminRequest'    
          '400':
            description: Invalid field value
          '404':
            description: Entry not found
  /adminRequests/create:
    post:
      tags:
        - adminRequests
      summary: Create new admin request
      description: Create new admin requests entry
      operationId: createAdminRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminRequest'          
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /adminRequests/edit:
    put:
      tags:
        - adminRequests
      summary: Edit admin request
      description: Edit admin requests entry
      operationId: editAdminRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminRequest'          
        '400':
          description: Invalid adminRequest Id
        '422':
          description: Validation exception
  
  /adminRequests/{adminRequestId}:
    delete:
      tags:
        - adminRequests
      summary: Delete adminRequest by ID
      description: delete an adminRequest
      operationId: deleteAdminRequest
      parameters:
        - name: adminRequestId
          in: path
          description: ID of the booking that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
components:
  schemas:
    Booking:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        venueBooker:
          type: string
          format: email
          example: 256980@students.wits.ac.za
        venueId:
          type: string
          format: int64
          example: 198772
        bookingDate:
          type: string
          format: date
        bookingStartTime: #maybe come back and create time type
          type: string    #for now just use military time
          example: "14:00"
        bookingEndTime:
          type: string
          example: "16:00"
        bookingDescription:
          type: string
          example: COMS3003A Test 2
    Schedule:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        venueBooker:
          type: string
          format: email
          example: richard.klein@wits.ac.za
        venueId:
          type: string
          format: int64
          example: 198772
        bookingDay:
          type: string
          enum:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
        bookingStartTime: #maybe come back and create time type
          type: string    #for now just use military time
          example: "14:00"
        bookingEndTime:
          type: string
          example: "16:00"
        bookingDescription:
          type: string
          example: COMS3003A lecture
    User:
      required:
        - firstName
        - lastName
        - email
        - accessLevel
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: 2560590@students.wits.ac.za
        isStudent:
          type: boolean
        isLecturer:
          type: boolean
        isAdmin:
          type: boolean
    Venue:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        campus:
          type: string
          enum: 
            - East Campus
            - West Campus
        buildingName:
          type: string
          example: Maths and Science Lab
        venueName:
          type: string
          example: MSL004
        venueCapacity:
          type:  integer
          format: int64
          example: 300
        availableTimes:
          type: array
          items: 
            type: string
            example: ["14:00", "16:00"]
        closureStatus: #True if closed, false if operational
          type: boolean
    Report:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        venueId:
          type: integer
          format: int64
          example: 12
        reportType:
          type: string
          enum: 
            - Maintenance Issue
            - Equipment Issue
            - Health Issue
            - Incorrect Venue Details
            - Other
        reportText:
          type: string
          example: "There are live cables everywhere"
        reportStatus:
          type: string
          enum: 
            - Pending
            - In progress
            - Resolved
        resolutionLog:
          type: string
          example : "Cables exposed"
          
    AdminRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        requesterEmail:
          type: string
          format: email
          example: "john.smith@wits.ac.za"
        requestText:
          type: string
          example: "I would like to move my lectures to CLM102"
        
    # ApiResponse:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #     type:
    #       type: string
    #     message:
    #       type: string
    #   xml:
    #     name: '##default'
  
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header